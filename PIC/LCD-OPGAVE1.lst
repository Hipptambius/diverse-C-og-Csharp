CCS PCM C Compiler, Version 4.115, 93510674               17-maj-13 09:29

               Filename: C:\Users\Jimmy\Desktop\Arbejde-programmering\Opgaver\LCD-OPGAVE1.lst

               ROM used: 375 words (5%)
                         Largest free fragment is 2048
               RAM used: 7 (2%) at main() level
                         20 (6%) worst case
               Stack:    4 locations

*
0000:  NOP
0001:  MOVLW  01
0002:  MOVWF  0A
0003:  GOTO   161
.................... #include <LCD-OPGAVE1.h> 
.................... #include <16F877.h> 
.................... //////// Standard Header file for the PIC16F877 device //////////////// 
.................... #device PIC16F877 
.................... #list 
....................  
.................... #device ICD=TRUE 
.................... #device adc=16 
....................  
.................... #FUSES NOWDT                 	//No Watch Dog Timer 
.................... #FUSES HS                    	//High speed Osc (> 4mhz for PCM/PCH) (>10mhz for PCD) 
.................... #FUSES NOBROWNOUT            	//No brownout reset 
.................... #FUSES NOLVP                 	//No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................  
.................... #use delay(clock=4000000) 
*
0013:  MOVLW  26
0014:  MOVWF  04
0015:  BCF    03.7
0016:  MOVF   00,W
0017:  BTFSC  03.2
0018:  GOTO   027
0019:  MOVLW  01
001A:  MOVWF  78
001B:  CLRF   77
001C:  DECFSZ 77,F
001D:  GOTO   01C
001E:  DECFSZ 78,F
001F:  GOTO   01B
0020:  MOVLW  4A
0021:  MOVWF  77
0022:  DECFSZ 77,F
0023:  GOTO   022
0024:  GOTO   025
0025:  DECFSZ 00,F
0026:  GOTO   019
0027:  RETURN
....................  
....................  
.................... #include <string.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STRING 
.................... #define _STRING 
.................... #include <stddef.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDDEF 
....................  
.................... #define _STDDEF 
....................  
.................... #if sizeof(unsigned int8 *)==1 
.................... #define ptrdiff_t unsigned int8 
.................... #else 
.................... #define ptrdiff_t unsigned int16 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
.................... #define size_t unsigned int8 
.................... #else 
.................... #define size_t unsigned int16 
.................... #endif 
.................... #define wchar_t char 
.................... #define NULL 0 
....................  
.................... #define offsetof(s,f) (offsetofbit(s,f)/8) 
....................  
.................... #endif 
....................  
.................... #include <ctype.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _CTYPE 
.................... #define _CTYPE 
....................  
.................... #define islower(x)  isamong(x,"abcdefghijklmnopqrstuvwxyz") 
.................... #define isupper(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZ") 
.................... #define isalnum(x)  isamong(x,"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz") 
.................... #define isalpha(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz") 
.................... #define isdigit(x)  isamong(x,"0123456789") 
.................... #define isspace(x)  ((x)==' ') 
.................... #define isxdigit(x) isamong(x,"0123456789ABCDEFabcdef") 
.................... #define iscntrl(x)  ((x)<' ') 
.................... #define isprint(x)  ((x)>=' ') 
.................... #define isgraph(x)  ((x)>' ') 
.................... #define ispunct(x)  (((x)>' ')&&!isalnum(x)) 
....................  
.................... #endif 
....................  
....................  
....................  
....................  
....................  
.................... ////////////////////////////////////////////// 
.................... //// Uncomment the following define to    //// 
.................... //// allow some functions to use a        //// 
.................... //// quicker algorithm, but use more ROM  //// 
.................... ////                                      //// 
.................... //// #define FASTER_BUT_MORE_ROM          //// 
.................... ////////////////////////////////////////////// 
....................  
....................  
....................  
.................... /*Copying functions*/ 
.................... /* standard template: 
....................    void *memmove(void *s1, void *s2, size_t n). 
....................    Copies max of n characters safely (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *memmove(void *s1,char *s2,size_t n) 
.................... { 
....................    char *sc1; 
....................    char *sc2; 
....................    sc1=s1; 
....................    sc2=s2; 
....................    if(sc2<sc1 && sc1 <sc2 +n) 
....................       for(sc1+=n,sc2+=n;0<n;--n) 
....................          *--sc1=*--sc2; 
....................    else 
....................       for(;0<n;--n) 
....................          *sc1++=*sc2++; 
....................   return s1; 
....................   } 
....................  
.................... /* Standard template: char *strcpy(char *s1, const char *s2) 
....................    copies the string s2 including the null character to s1. 
....................    This is a compiler built in to handle the different address 
....................    spaces */ 
....................  
.................... #define strcopy strcpy 
....................  
.................... /* standard template: 
....................    char *strncpy(char *s1, const char *s2, size_t n). 
....................    Copies max of n characters (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *strncpy(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................  
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(s1); 
.................... } 
.................... /***********************************************************/ 
....................  
.................... /*concatenation functions*/ 
.................... /* standard template: char *strcat(char *s1, const char *s2) 
.................... appends s2 to s1*/ 
....................  
.................... char *strcat(char *s1, char *s2) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0') 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
.................... /* standard template: char *strncat(char *s1, char *s2,size_t n) 
.................... appends not more than n characters from s2 to s1*/ 
....................  
.................... char *strncat(char *s1, char *s2, size_t n) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0' && 0<n) 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................       --n; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
....................  
.................... /***********************************************************/ 
....................  
....................  
.................... /*comparison functions*/ 
.................... /* standard template: signed int memcmp(void *s1, void *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 memcmp(void * s1,char *s2,size_t n) 
.................... { 
.................... char *su1, *su2; 
.................... for(su1=s1, su2=s2; 0<n; ++su1, ++su2, --n) 
.................... { 
....................    if(*su1!=*su2) 
....................       return ((*su1<*su2)?-1:+1); 
.................... } 
.................... return 0; 
.................... } 
....................  
.................... /* standard template: int strcmp(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcmp(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
.................... /* standard template: int strcoll(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcoll(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
.................... /* standard template: 
....................    int strncmp(const char *s1, const char *s2, size_t n). 
....................    Compares max of n characters (not following 0) from s1 to s2; 
....................    returns same as strcmp */ 
....................  
.................... signed int8 strncmp(char *s1, char *s2, size_t n) 
.................... { 
....................    for (; n > 0; s1++, s2++, n--) 
....................       if (*s1 != *s2) 
....................          return((*s1 <*s2) ? -1: 1); 
....................       else if (*s1 == '\0') 
....................          return(0); 
....................    return(0); 
.................... } 
.................... /* standard template: 
....................    int strxfrm(const char *s1, const char *s2, size_t n). 
....................    transforms maximum of n characters from s2 and places them into s1*/ 
.................... size_t strxfrm(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................   unsigned int8 n1; 
....................   n1=n; 
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(n1); 
.................... } 
....................  
....................  
....................  
....................  
....................  
.................... /***********************************************************/ 
.................... /*Search functions*/ 
.................... /* standard template: void *memchr(const char *s, int c). 
....................    Finds first occurrence of c in n characters of s */ 
....................  
.................... char *memchr(void *s,unsigned int8 c,size_t n) 
.................... { 
....................    char uc; 
....................    char *su; 
....................    uc=c; 
....................    for(su=s;0<n;++su,--n) 
....................       if(*su==uc) 
....................       return su; 
....................    return NULL; 
.................... } 
....................  
.................... /* standard template: char *strchr(const char *s, int c). 
....................    Finds first occurrence of c in s */ 
....................  
.................... char *strchr(char *s, unsigned int8 c) 
.................... { 
....................    for (; *s != c; s++) 
....................       if (*s == '\0') 
....................          return(0); 
....................    return(s); 
.................... } 
.................... /* standard template: 
....................    size_t strcspn(const char *s1, const char *s2). 
....................    Computes length of max initial segment of s1 that 
....................    consists entirely of characters NOT from s2*/ 
....................  
.................... unsigned int8  strcspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1 - s1); 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strpbrk(const char *s1, const char *s2). 
....................    Locates first occurence of any character from s2 in s1; 
....................    returns s1 if s2 is empty string */ 
....................  
.................... char *strpbrk(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1); 
....................    return(0); 
.................... } 
....................  
....................  
.................... /* standard template: char *strrchr(const char *s, int c). 
....................    Finds last occurrence of c in s */ 
....................  
.................... char *strrchr(char *s, unsigned int8 c) 
.................... { 
....................    char *p; 
....................  
....................    for (p = 0; ; s++) 
....................    { 
....................       if (*s == c) 
....................          p = s; 
....................       if (*s == '\0') 
....................          return(p); 
....................    } 
.................... } 
.................... /* computes length of max initial segment of s1 consisting 
....................    entirely of characters from s2 */ 
....................  
.................... unsigned int8  strspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; ; sc2++) 
....................     if (*sc2 == '\0') 
....................        return(sc1 - s1); 
....................          else if (*sc1 == *sc2) 
....................             break; 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strstr(const char *s1, const char *s2); 
....................    Locates first occurence of character sequence s2 in s1; 
....................    returns 0 if s2 is empty string 
....................  
....................    Uncomment #define FASTER_BUT_MORE_ROM at the top of the 
....................    file to use the faster algorithm */ 
.................... char *strstr(char *s1, char *s2) 
.................... { 
....................    char *s, *t; 
....................  
....................    #ifdef FASTER_BUT_MORE_ROM 
....................    if (*s2 == '\0') 
....................          return(s1); 
....................    #endif 
....................  
....................    while (*s1) 
....................    { 
....................       for(s = s1, t = s2; *t && (*s == *t); ++s, ++t); 
....................  
....................       if (*t == '\0') 
....................          return s1; 
....................       ++s1; 
....................       #ifdef FASTER_BUT_MORE_ROM 
....................          while(*s1 != '\0' && *s1 != *s2) 
....................             ++s1; 
....................       #endif 
....................    } 
....................    return 0; 
.................... } 
....................  
.................... /* standard template: char *strtok(char *s1, const char *s2). 
....................  
....................    Finds next token in s1 delimited by a character from separator 
....................    string s2 (which can be different from call to call).  First call 
....................    starts at beginning of s1 searching for first character NOT 
....................    contained in s2; returns 0 if none is found. 
....................    If one is found, it is the start of first token (return value). 
....................    Function then searches from there for a character contained in s2. 
....................    If none is found, current token extends to end of s1, and subsequent 
....................    searches for a token will return 0.  If one is found, it is 
....................    overwritten by '\0', which terminates current token.  Function saves 
....................    pointer to following character from which next search will start. 
....................    Each subsequent call, with 0 as first argument, starts searching 
....................    from saved pointer */ 
....................  
.................... char *strtok(char *s1, char *s2) 
.................... { 
....................    char *beg, *end; 
....................    static char *save; 
*
016A:  BCF    03.5
016B:  CLRF   20
016C:  CLRF   21
....................  
....................    beg = (s1)? s1: save; 
....................    beg += strspn(beg, s2); 
....................    if (*beg == '\0') 
....................    { 
....................       *save = ' '; 
....................       return(0); 
....................    } 
....................    end = strpbrk(beg, s2); 
....................    if (*end != '\0') 
....................    { 
....................       *end = '\0'; 
....................       end++; 
....................    } 
....................    save = end; 
....................    return(beg); 
.................... } 
....................  
.................... /*****************************************************************/ 
.................... /*Miscellaneous functions*/ 
.................... /* standard template 
.................... maps error number in errnum to an error message string 
.................... Returns: Pointer to string 
.................... */ 
.................... #ifdef _ERRNO 
.................... char * strerror(unsigned int8 errnum) 
.................... { 
.................... char s[15]; 
.................... switch( errnum) 
.................... { 
.................... case 0: 
....................    strcpy(s,"no errors"); 
....................    return s; 
.................... case EDOM : 
....................    strcpy(s,"domain error"); 
....................    return s; 
.................... case ERANGE: 
....................    strcpy(s,"range error"); 
....................    return s; 
.................... } 
.................... } 
.................... #ENDIF 
.................... /* standard template: size_t strlen(const char *s). 
....................    Computes length of s1 (preceding terminating 0) */ 
....................  
.................... unsigned int8 strlen(char *s) 
.................... { 
....................    char *sc; 
....................  
....................    for (sc = s; *sc != 0; sc++); 
....................    return(sc - s); 
.................... } 
....................  
.................... /* standard template: size_t stricmp(const char *s1, const char *s2). 
....................    Compares s1 to s2 ignoring case (upper vs. lower) */ 
....................  
.................... signed int8 stricmp(char *s1, char *s2) 
.................... { 
....................  for(; *s1==*s2||(isalpha(*s1)&&isalpha(*s2)&&(*s1==*s2+32||*s2==*s1+32)); 
....................     s1++, s2++) 
....................     if (*s1 == '\0') 
....................        return(0); 
....................  return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
....................  
.................... /* standard template: char *strlwr(char *s). 
....................    Replaces uppercase letters by lowercase; 
....................    returns pointer to new string s */ 
....................  
.................... char *strlwr(char *s) 
.................... { 
....................    char *p; 
....................  
....................    for (p = s; *p != '\0'; p++) 
....................       if (*p >= 'A' && *p <='Z') 
....................          *p += 'a' - 'A'; 
....................    return(s); 
.................... } 
....................  
....................  
.................... /************************************************************/ 
....................  
....................  
.................... #endif 
....................  
....................  
.................... //LCD setup 
.................... #define LCD_ENABLE_PIN  PIN_A1 
.................... #define LCD_RS_PIN      PIN_A3 
.................... #define LCD_RW_PIN      PIN_A2 
.................... #define LCD_POWER       PIN_A4 
....................  
....................  
.................... #define LCD_DATA4       PIN_D0 
.................... #define LCD_DATA5       PIN_D1 
.................... #define LCD_DATA6       PIN_D2 
.................... #define LCD_DATA7       PIN_D3 
....................  
.................... #include <rene_lcd.c> 
.................... // flex_lcd.c  
....................  
.................... // These pins are for the Microchip PicDem2-Plus board,  
.................... // which is what I used to test the driver.  Change these  
.................... // pins to fit your own board.  
....................  
.................... #define LCD_DB4   PIN_D0  
.................... #define LCD_DB5   PIN_D1  
.................... #define LCD_DB6   PIN_D2  
.................... #define LCD_DB7   PIN_D3  
....................  
.................... #define LCD_E     PIN_A1  
.................... #define LCD_RS    PIN_A3  
.................... #define LCD_RW    PIN_A2  
....................  
.................... // If you only want a 6-pin interface to your LCD, then  
.................... // connect the R/W pin on the LCD to ground, and comment  
.................... // out the following line.  
....................  
.................... #define USE_LCD_RW   1       
....................  
.................... //========================================  
....................  
.................... #define lcd_type 2        // 0=5x7, 1=5x10, 2=2 lines  
.................... #define lcd_line_two 0x40 // LCD RAM address for the 2nd line  
....................  
....................  
.................... int8 const LCD_INIT_STRING[4] =  
.................... {  
....................  0x20 | (lcd_type << 2), // Func set: 4-bit, 2 lines, 5x8 dots  
....................  0xc,                    // Display on  
....................  1,                      // Clear display  
....................  6                       // Increment cursor  
....................  };  
....................                                
....................  
.................... //-------------------------------------  
.................... void lcd_send_nibble(int8 nibble)  
.................... {  
.................... // Note:  !! converts an integer expression  
.................... // to a boolean (1 or 0).  
....................  output_bit(LCD_DB4, !!(nibble & 1));  
*
0028:  BTFSC  2D.0
0029:  GOTO   02C
002A:  BCF    08.0
002B:  GOTO   02D
002C:  BSF    08.0
002D:  BSF    03.5
002E:  BCF    08.0
....................  output_bit(LCD_DB5, !!(nibble & 2));   
002F:  BCF    03.5
0030:  BTFSC  2D.1
0031:  GOTO   034
0032:  BCF    08.1
0033:  GOTO   035
0034:  BSF    08.1
0035:  BSF    03.5
0036:  BCF    08.1
....................  output_bit(LCD_DB6, !!(nibble & 4));     
0037:  BCF    03.5
0038:  BTFSC  2D.2
0039:  GOTO   03C
003A:  BCF    08.2
003B:  GOTO   03D
003C:  BSF    08.2
003D:  BSF    03.5
003E:  BCF    08.2
....................  output_bit(LCD_DB7, !!(nibble & 8));     
003F:  BCF    03.5
0040:  BTFSC  2D.3
0041:  GOTO   044
0042:  BCF    08.3
0043:  GOTO   045
0044:  BSF    08.3
0045:  BSF    03.5
0046:  BCF    08.3
....................  
....................  delay_cycles(1);  
0047:  NOP
....................  output_high(LCD_E);  
0048:  BCF    05.1
0049:  BCF    03.5
004A:  BSF    05.1
....................  delay_us(2);  
004B:  GOTO   04C
....................  output_low(LCD_E);  
004C:  BSF    03.5
004D:  BCF    05.1
004E:  BCF    03.5
004F:  BCF    05.1
.................... }  
0050:  RETURN
....................  
.................... //-----------------------------------  
.................... // This sub-routine is only called by lcd_read_byte().  
.................... // It's not a stand-alone routine.  For example, the  
.................... // R/W signal is set high by lcd_read_byte() before  
.................... // this routine is called.       
....................  
.................... #ifdef USE_LCD_RW  
.................... int8 lcd_read_nibble(void)  
.................... {  
.................... int8 retval;  
.................... // Create bit variables so that we can easily set  
.................... // individual bits in the retval variable.  
.................... #bit retval_0 = retval.0  
.................... #bit retval_1 = retval.1  
.................... #bit retval_2 = retval.2  
.................... #bit retval_3 = retval.3  
....................  
.................... retval = 0;  
0051:  CLRF   2E
....................      
.................... output_high(LCD_E);  
0052:  BSF    03.5
0053:  BCF    05.1
0054:  BCF    03.5
0055:  BSF    05.1
.................... delay_cycles(1);  
0056:  NOP
....................  
.................... retval_0 = input(LCD_DB4);  
0057:  BSF    03.5
0058:  BSF    08.0
0059:  BCF    03.5
005A:  BCF    2E.0
005B:  BTFSC  08.0
005C:  BSF    2E.0
.................... retval_1 = input(LCD_DB5);  
005D:  BSF    03.5
005E:  BSF    08.1
005F:  BCF    03.5
0060:  BCF    2E.1
0061:  BTFSC  08.1
0062:  BSF    2E.1
.................... retval_2 = input(LCD_DB6);  
0063:  BSF    03.5
0064:  BSF    08.2
0065:  BCF    03.5
0066:  BCF    2E.2
0067:  BTFSC  08.2
0068:  BSF    2E.2
.................... retval_3 = input(LCD_DB7);  
0069:  BSF    03.5
006A:  BSF    08.3
006B:  BCF    03.5
006C:  BCF    2E.3
006D:  BTFSC  08.3
006E:  BSF    2E.3
....................    
.................... output_low(LCD_E);  
006F:  BSF    03.5
0070:  BCF    05.1
0071:  BCF    03.5
0072:  BCF    05.1
....................      
.................... return(retval);     
0073:  MOVF   2E,W
0074:  MOVWF  78
.................... }     
0075:  RETURN
.................... #endif  
....................  
.................... //---------------------------------------  
.................... // Read a byte from the LCD and return it.  
....................  
.................... #ifdef USE_LCD_RW  
.................... int8 lcd_read_byte(void)  
.................... {  
.................... int8 low;  
.................... int8 high;  
....................  
.................... output_high(LCD_RW);  
*
007A:  BSF    03.5
007B:  BCF    05.2
007C:  BCF    03.5
007D:  BSF    05.2
.................... delay_cycles(1);  
007E:  NOP
....................  
.................... high = lcd_read_nibble();  
007F:  CALL   051
0080:  MOVF   78,W
0081:  MOVWF  2D
....................  
.................... low = lcd_read_nibble();  
0082:  CALL   051
0083:  MOVF   78,W
0084:  MOVWF  2C
....................  
.................... return( (high<<4) | low);  
0085:  SWAPF  2D,W
0086:  MOVWF  77
0087:  MOVLW  F0
0088:  ANDWF  77,F
0089:  MOVF   77,W
008A:  IORWF  2C,W
008B:  MOVWF  78
.................... }  
.................... #endif  
....................  
.................... //----------------------------------------  
.................... // Send a byte to the LCD.  
.................... void lcd_send_byte(int8 address, int8 n)  
.................... {  
.................... output_low(LCD_RS);  
*
0076:  BSF    03.5
0077:  BCF    05.3
0078:  BCF    03.5
0079:  BCF    05.3
....................  
.................... #ifdef USE_LCD_RW  
.................... while(bit_test(lcd_read_byte(),7)) ;  
*
008C:  MOVF   78,W
008D:  MOVWF  2C
008E:  BTFSC  2C.7
008F:  GOTO   07A
.................... #else  
.................... delay_us(60);   
.................... #endif  
....................  
.................... if(address)  
0090:  MOVF   2A,F
0091:  BTFSC  03.2
0092:  GOTO   098
....................    output_high(LCD_RS);  
0093:  BSF    03.5
0094:  BCF    05.3
0095:  BCF    03.5
0096:  BSF    05.3
.................... else  
0097:  GOTO   09C
....................    output_low(LCD_RS);  
0098:  BSF    03.5
0099:  BCF    05.3
009A:  BCF    03.5
009B:  BCF    05.3
....................        
....................  delay_cycles(1);  
009C:  NOP
....................  
.................... #ifdef USE_LCD_RW  
.................... output_low(LCD_RW);  
009D:  BSF    03.5
009E:  BCF    05.2
009F:  BCF    03.5
00A0:  BCF    05.2
.................... delay_cycles(1);  
00A1:  NOP
.................... #endif  
....................  
.................... output_low(LCD_E);  
00A2:  BSF    03.5
00A3:  BCF    05.1
00A4:  BCF    03.5
00A5:  BCF    05.1
....................  
.................... lcd_send_nibble(n >> 4);  
00A6:  SWAPF  2B,W
00A7:  MOVWF  2C
00A8:  MOVLW  0F
00A9:  ANDWF  2C,F
00AA:  MOVF   2C,W
00AB:  MOVWF  2D
00AC:  CALL   028
.................... lcd_send_nibble(n & 0xf);  
00AD:  MOVF   2B,W
00AE:  ANDLW  0F
00AF:  MOVWF  2C
00B0:  MOVWF  2D
00B1:  CALL   028
.................... }  
00B2:  RETURN
....................  
.................... //----------------------------  
.................... void lcd_init(void)  
.................... {  
.................... int8 i;  
....................  
.................... output_low(LCD_RS);  
00B3:  BSF    03.5
00B4:  BCF    05.3
00B5:  BCF    03.5
00B6:  BCF    05.3
....................  
.................... #ifdef USE_LCD_RW  
.................... output_low(LCD_RW);  
00B7:  BSF    03.5
00B8:  BCF    05.2
00B9:  BCF    03.5
00BA:  BCF    05.2
.................... #endif  
....................  
.................... output_low(LCD_E);  
00BB:  BSF    03.5
00BC:  BCF    05.1
00BD:  BCF    03.5
00BE:  BCF    05.1
....................  
.................... delay_ms(15);  
00BF:  MOVLW  0F
00C0:  MOVWF  26
00C1:  CALL   013
....................  
.................... for(i=0 ;i < 3; i++)  
00C2:  CLRF   22
00C3:  MOVF   22,W
00C4:  SUBLW  02
00C5:  BTFSS  03.0
00C6:  GOTO   0CF
....................    {  
....................     lcd_send_nibble(0x03);  
00C7:  MOVLW  03
00C8:  MOVWF  2D
00C9:  CALL   028
....................     delay_ms(5);  
00CA:  MOVLW  05
00CB:  MOVWF  26
00CC:  CALL   013
....................    }  
00CD:  INCF   22,F
00CE:  GOTO   0C3
....................  
.................... lcd_send_nibble(0x02);  
00CF:  MOVLW  02
00D0:  MOVWF  2D
00D1:  CALL   028
....................  
.................... for(i=0; i < sizeof(LCD_INIT_STRING); i++)  
00D2:  CLRF   22
00D3:  MOVF   22,W
00D4:  SUBLW  03
00D5:  BTFSS  03.0
00D6:  GOTO   0E0
....................    {  
....................     lcd_send_byte(0, LCD_INIT_STRING[i]);  
00D7:  MOVF   22,W
00D8:  CALL   004
00D9:  MOVWF  23
00DA:  CLRF   2A
00DB:  MOVF   23,W
00DC:  MOVWF  2B
00DD:  CALL   076
....................      
....................     // If the R/W signal is not used, then  
....................     // the busy bit can't be polled.  One of  
....................     // the init commands takes longer than  
....................     // the hard-coded delay of 60 us, so in  
....................     // that case, lets just do a 5 ms delay  
....................     // after all four of them.  
....................     #ifndef USE_LCD_RW  
....................     delay_ms(5);  
....................     #endif  
....................    }  
00DE:  INCF   22,F
00DF:  GOTO   0D3
....................  
.................... }  
00E0:  BCF    0A.3
00E1:  BCF    0A.4
00E2:  GOTO   16E (RETURN)
....................  
.................... //----------------------------  
....................  
.................... void lcd_gotoxy(int8 x, int8 y)  
.................... {  
.................... int8 address;  
....................  
.................... if(y != 1)  
*
00FA:  DECFSZ 27,W
00FB:  GOTO   0FD
00FC:  GOTO   100
....................    address = lcd_line_two;  
00FD:  MOVLW  40
00FE:  MOVWF  28
.................... else  
00FF:  GOTO   101
....................    address=0;  
0100:  CLRF   28
....................  
.................... address += x-1;  
0101:  MOVLW  01
0102:  SUBWF  26,W
0103:  ADDWF  28,F
.................... lcd_send_byte(0, 0x80 | address);  
0104:  MOVF   28,W
0105:  IORLW  80
0106:  MOVWF  29
0107:  CLRF   2A
0108:  MOVF   29,W
0109:  MOVWF  2B
010A:  CALL   076
010B:  NOP
.................... }  
....................  
.................... //-----------------------------  
.................... void lcd_putc(char c)  
.................... {  
....................  switch(c)  
....................    {  
*
00E3:  MOVF   25,W
00E4:  XORLW  0C
00E5:  BTFSC  03.2
00E6:  GOTO   0EE
00E7:  XORLW  06
00E8:  BTFSC  03.2
00E9:  GOTO   0F6
00EA:  XORLW  02
00EB:  BTFSC  03.2
00EC:  GOTO   10D
00ED:  GOTO   112
....................     case '\f':  
....................       lcd_send_byte(0,1);  
00EE:  CLRF   2A
00EF:  MOVLW  01
00F0:  MOVWF  2B
00F1:  CALL   076
....................       delay_ms(2);  
00F2:  MOVLW  02
00F3:  MOVWF  26
00F4:  CALL   013
....................       break;  
00F5:  GOTO   118
....................      
....................     case '\n':  
....................        lcd_gotoxy(1,2);  
00F6:  MOVLW  01
00F7:  MOVWF  26
00F8:  MOVLW  02
00F9:  MOVWF  27
....................        break;  
*
010C:  GOTO   118
....................      
....................     case '\b':  
....................        lcd_send_byte(0,0x10);  
010D:  CLRF   2A
010E:  MOVLW  10
010F:  MOVWF  2B
0110:  CALL   076
....................        break;  
0111:  GOTO   118
....................      
....................     default:  
....................        lcd_send_byte(1,c);  
0112:  MOVLW  01
0113:  MOVWF  2A
0114:  MOVF   25,W
0115:  MOVWF  2B
0116:  CALL   076
....................        break;  
0117:  GOTO   118
....................    }  
.................... }  
0118:  RETURN
....................  
.................... //------------------------------  
.................... #ifdef USE_LCD_RW  
.................... char lcd_getc(int8 x, int8 y)  
.................... {  
.................... char value;  
....................  
.................... lcd_gotoxy(x,y);  
....................  
.................... // Wait until busy flag is low.  
.................... while(bit_test(lcd_read_byte(),7));   
....................  
.................... output_high(LCD_RS);  
.................... value = lcd_read_byte();  
.................... output_low(lcd_RS);  
....................  
.................... return(value);  
.................... }  
.................... #endif 
....................  
....................  
....................  
.................... void main() 
.................... { 
*
0161:  CLRF   04
0162:  BCF    03.7
0163:  MOVLW  1F
0164:  ANDWF  03,F
0165:  BSF    03.5
0166:  BSF    1F.0
0167:  BSF    1F.1
0168:  BSF    1F.2
0169:  BCF    1F.3
....................    lcd_init(); 
*
016D:  GOTO   0B3
....................    printf(lcd_putc,"Jimmy er gud"); 
016E:  MOVLW  0C
016F:  BSF    03.6
0170:  MOVWF  0D
0171:  MOVLW  00
0172:  MOVWF  0F
0173:  BCF    03.6
0174:  GOTO   119
....................    while (TRUE) 
....................    { 
....................    } 
0175:  GOTO   175
....................  
....................  
.................... } 
0176:  GOTO   176

Configuration Fuses:
   Word  1: 353A   HS NOWDT NOPUT NOBROWNOUT NOLVP NOCPD NOWRT DEBUG NOPROTECT

   Some fuses have been forced to be compatible with the ICD debugger.
