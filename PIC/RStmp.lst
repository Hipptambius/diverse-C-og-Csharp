CCS PCH C Compiler, Version 4.115, 93510674               21-maj-13 14:43

               Filename: C:\Users\Jimmy\Desktop\Arbejde-programmering\Opgaver\RStmp.lst

               ROM used: 440 bytes (1%)
                         Largest free fragment is 31496
               RAM used: 6 (0%) at main() level
                         12 (1%) worst case
               Stack:    2 locations

*
0000:  GOTO   00F2
.................... #include <RStmp.h> 
.................... #include <18F252.h> 
.................... //////// Standard Header file for the PIC18F252 device //////////////// 
.................... #device PIC18F252 
.................... #list 
....................  
.................... #device ICD=TRUE 
.................... #device adc=16 
....................  
.................... #FUSES NOWDT                 	//No Watch Dog Timer 
.................... #FUSES WDT128                	//Watch Dog Timer uses 1:128 Postscale 
.................... #FUSES OSCSEN                	//Oscillator switching is enabled 
.................... #FUSES NOBROWNOUT            	//No brownout reset 
.................... #FUSES NOLVP                 	//No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................  
.................... #use delay(clock=4000000) 
00C8:  CLRF   FEA
00CA:  MOVLW  08
00CC:  MOVWF  FE9
00CE:  MOVF   FEF,W
00D0:  BZ    00EE
00D2:  MOVLW  01
00D4:  MOVWF  01
00D6:  CLRF   00
00D8:  DECFSZ 00,F
00DA:  BRA    00D8
00DC:  DECFSZ 01,F
00DE:  BRA    00D6
00E0:  MOVLW  4A
00E2:  MOVWF  00
00E4:  DECFSZ 00,F
00E6:  BRA    00E4
00E8:  BRA    00EA
00EA:  DECFSZ FEF,F
00EC:  BRA    00D2
00EE:  GOTO   0184 (RETURN)
.................... #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=PORT1) 
....................  
....................  
.................... #include <ds1621.c> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////   Library for a Dallas 1621 Temperature chip                       //// 
.................... ////                                                                    //// 
.................... ////   init_temp();          Call before the other functions are used   //// 
.................... ////                                                                    //// 
.................... ////   d = read_high_temp(); Read the temperature in degrees F (0-255)  //// 
.................... ////                                                                    //// 
.................... ////   d = read_low_temp();  Read the temp in degrees F (-67 to 127)    //// 
.................... ////                                                                    //// 
.................... ////   d = read_full_temp(); Read the temp in degrees F (-67 to 257)    //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... #ifndef DAL_SCL 
.................... #define DAL_SCL PIN_B0 
.................... #define DAL_SDA PIN_B1 
.................... #endif 
....................  
.................... #define read_temp    read_high_temp // for backwards compatability 
....................  
.................... #use i2c(master,sda=DAL_SDA, scl=DAL_SCL) 
....................  
....................  
.................... void temp_config(BYTE data) { 
....................  
....................    i2c_start(); 
....................    i2c_write(0x90); 
....................    i2c_write(0xac); 
....................    i2c_write(data); 
....................    i2c_stop(); 
.................... } 
....................  
....................  
.................... void init_temp() { 
....................    output_high(DAL_SDA); 
....................    output_high(DAL_SCL); 
....................    i2c_start(); 
....................    i2c_write(0x90); 
....................    i2c_write(0xee); 
....................    i2c_stop(); 
....................    temp_config(8); 
.................... } 
....................  
....................  
.................... BYTE read_high_temp() {        // Returns degrees F (0-255) 
....................    BYTE datah,datal; 
....................    signed long data; 
....................  
....................    i2c_start(); 
....................    i2c_write(0x90); 
....................    i2c_write(0xaa); 
....................    i2c_start(); 
....................    i2c_write(0x91); 
....................    datah=i2c_read(); 
....................    datal=i2c_read(0); 
....................    i2c_stop(); 
....................  
....................    data=datah; 
....................    data=data*9; 
....................    if(bit_test(datal,7)) 
....................    { 
....................       if(data < 0) 
....................           data -= 4; 
....................       else 
....................          data += 4; 
....................    } 
....................    data=(data/5)+32; 
....................  
....................    if(data < 0) 
....................       data = 0; 
....................    else if(data > 255) 
....................       data = 255; 
....................  
....................    return((int)data); 
.................... } 
....................  
....................  
.................... signed int read_low_temp() {  // Returns degrees F (-67 to 127) 
....................    signed int datah, datal; 
....................    signed long data; 
....................  
....................    i2c_start(); 
....................    i2c_write(0x90); 
....................    i2c_write(0xaa); 
....................    i2c_start(); 
....................    i2c_write(0x91); 
....................    datah=i2c_read(); 
....................    datal=i2c_read(0); 
....................    i2c_stop(); 
....................  
....................    data=datah; 
....................    data=data*9; 
....................    if(bit_test(datal,7)) 
....................    { 
....................       if(data < 0) 
....................           data -= 4; 
....................       else 
....................          data += 4; 
....................    } 
....................    data = (data / 5) + 32; 
....................  
....................    if(data > 127) 
....................       data = 127; 
....................  
....................    return((int)data); 
.................... } 
....................  
....................  
.................... signed long read_full_temp() {  // Returns degrees F (-67 to 257) 
....................    signed int datah, datal; 
....................    signed long data; 
....................  
....................    i2c_start(); 
....................    i2c_write(0x90); 
....................    i2c_write(0xaa); 
....................    i2c_start(); 
....................    i2c_write(0x91); 
....................    datah=i2c_read(); 
....................    datal=i2c_read(0); 
....................    i2c_stop(); 
....................  
....................    data=datah; 
....................    data=data*9; 
....................    if(bit_test(datal,7)) 
....................    { 
....................       if(data < 0) 
....................           data -= 4; 
....................       else 
....................          data += 4; 
....................    } 
....................    data = (data / 5) + 32; 
....................  
....................    return(data); 
.................... } 
....................  
.................... //RS232 KRYDS MELLEM 2 BOARDS, UDLÆSNING OG INDLÆSNING 
.................... //TEK, HOLMEN 2013 
.................... //JIMMY SCHACH 
.................... int x=0; 
....................  
....................  
.................... void main() 
.................... { 
00F2:  CLRF   FF8
00F4:  BCF    FD0.7
00F6:  CLRF   FEA
00F8:  CLRF   FE9
00FA:  MOVLW  19
00FC:  MOVWF  FAF
00FE:  MOVLW  A6
0100:  MOVWF  FAC
0102:  MOVLW  90
0104:  MOVWF  FAB
0106:  CLRF   04
0108:  BSF    FC1.0
010A:  BSF    FC1.1
010C:  BSF    FC1.2
010E:  BCF    FC1.3
....................    setup_adc(ADC_CLOCK_INTERNAL); 
0110:  BCF    FC1.6
0112:  BSF    FC2.6
0114:  BSF    FC2.7
0116:  BCF    FC1.7
0118:  BSF    FC2.0
....................    setup_adc_ports(ALL_ANALOG); 
011A:  BCF    FC1.0
011C:  BCF    FC1.1
011E:  BCF    FC1.2
0120:  BCF    FC1.3
....................    set_adc_channel(0); 
0122:  MOVLW  00
0124:  MOVWF  01
0126:  MOVF   FC2,W
0128:  ANDLW  C7
012A:  IORWF  01,W
012C:  MOVWF  FC2
....................     int in; 
....................    while (true) 
....................    { 
....................       //Udlæsning fra analog potmeter 
....................       int A=READ_ADC(); 
012E:  BSF    FC2.2
0130:  BTFSC  FC2.2
0132:  BRA    0130
0134:  MOVFF  FC3,06
....................        
....................       //udlæsning til rs232 
....................       for (x=0;x<10;x++) 
0138:  CLRF   04
013A:  MOVF   04,W
013C:  SUBLW  09
013E:  BNC   018C
....................       { 
....................          printf("%u  -  %u \n\r",A,in); 
0140:  MOVFF  06,07
0144:  MOVLW  1B
0146:  MOVWF  08
0148:  RCALL  003A
014A:  MOVLW  06
014C:  MOVWF  FF6
014E:  MOVLW  00
0150:  MOVWF  FF7
0152:  MOVLW  05
0154:  MOVWF  07
0156:  BRA    00A6
0158:  MOVFF  05,07
015C:  MOVLW  1B
015E:  MOVWF  08
0160:  RCALL  003A
0162:  MOVLW  20
0164:  BTFSS  F9E.4
0166:  BRA    0164
0168:  MOVWF  FAD
016A:  MOVLW  0A
016C:  BTFSS  F9E.4
016E:  BRA    016C
0170:  MOVWF  FAD
0172:  MOVLW  0D
0174:  BTFSS  F9E.4
0176:  BRA    0174
0178:  MOVWF  FAD
....................          delay_ms(300);  
017A:  MOVLW  02
017C:  MOVWF  07
017E:  MOVLW  96
0180:  MOVWF  08
0182:  BRA    00C8
0184:  DECFSZ 07,F
0186:  BRA    017E
....................       }      
0188:  INCF   04,F
018A:  BRA    013A
....................       //modtag input fra rs232      
....................       
....................       for (x=0;x<10;x++) 
018C:  CLRF   04
018E:  MOVF   04,W
0190:  SUBLW  09
0192:  BNC   01B4
....................       { 
....................          if(kbhit()) { in = getch();} 
0194:  BTFSS  F9E.5
0196:  BRA    01A0
0198:  BTFSS  F9E.5
019A:  BRA    0198
019C:  MOVFF  FAE,05
....................        
....................          if (in<50) 
01A0:  MOVF   05,W
01A2:  SUBLW  31
01A4:  BNC   01AC
....................          { 
....................             output_high(PIN_B0); 
01A6:  BCF    F93.0
01A8:  BSF    F8A.0
....................          } 
....................          else 
01AA:  BRA    01B0
....................          { 
....................             output_low(PIN_B0); 
01AC:  BCF    F93.0
01AE:  BCF    F8A.0
....................          } 
....................       } 
01B0:  INCF   04,F
01B2:  BRA    018E
....................        
....................    } 
01B4:  BRA    012E
....................  
....................  
.................... } 
01B6:  BRA    01B6

Configuration Fuses:
   Word  1: 0700   RC_IO OSCSEN
   Word  2: 0E0D   NOPUT NOBROWNOUT BORV20 NOWDT WDT128
   Word  3: 0100   CCP2C1
   Word  4: 0001   STVREN NOLVP DEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB

   Some fuses have been forced to be compatible with the ICD debugger.
