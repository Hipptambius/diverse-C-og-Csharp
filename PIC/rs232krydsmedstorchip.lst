CCS PCM C Compiler, Version 4.115, 93510674               21-maj-13 14:08

               Filename: C:\Users\Jimmy\Desktop\Arbejde-programmering\Opgaver\rs232krydsmedstorchip.lst

               ROM used: 312 words (4%)
                         Largest free fragment is 2048
               RAM used: 7 (2%) at main() level
                         13 (4%) worst case
               Stack:    2 locations

*
0000:  NOP
0001:  MOVLW  00
0002:  MOVWF  0A
0003:  GOTO   0C2
.................... #include <rs232krydsmedstorchip.h> 
.................... #include <16F877.h> 
.................... //////// Standard Header file for the PIC16F877 device //////////////// 
.................... #device PIC16F877 
.................... #list 
....................  
.................... #device ICD=TRUE 
.................... #device adc=16 
....................  
.................... #FUSES NOWDT                 	//No Watch Dog Timer 
.................... #FUSES HS                    	//High speed Osc (> 4mhz for PCM/PCH) (>10mhz for PCD) 
.................... #FUSES NOBROWNOUT            	//No brownout reset 
.................... #FUSES NOLVP                 	//No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................  
.................... #use delay(clock=4000000) 
00AB:  MOVLW  24
00AC:  MOVWF  04
00AD:  BCF    03.7
00AE:  MOVF   00,W
00AF:  BTFSC  03.2
00B0:  GOTO   0BF
00B1:  MOVLW  01
00B2:  MOVWF  78
00B3:  CLRF   77
00B4:  DECFSZ 77,F
00B5:  GOTO   0B4
00B6:  DECFSZ 78,F
00B7:  GOTO   0B3
00B8:  MOVLW  4A
00B9:  MOVWF  77
00BA:  DECFSZ 77,F
00BB:  GOTO   0BA
00BC:  GOTO   0BD
00BD:  DECFSZ 00,F
00BE:  GOTO   0B1
00BF:  BCF    0A.3
00C0:  BCF    0A.4
00C1:  GOTO   118 (RETURN)
.................... #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=PORT1) 
....................  
....................  
.................... #include <ds1621.c> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////   Library for a Dallas 1621 Temperature chip                       //// 
.................... ////                                                                    //// 
.................... ////   init_temp();          Call before the other functions are used   //// 
.................... ////                                                                    //// 
.................... ////   d = read_high_temp(); Read the temperature in degrees F (0-255)  //// 
.................... ////                                                                    //// 
.................... ////   d = read_low_temp();  Read the temp in degrees F (-67 to 127)    //// 
.................... ////                                                                    //// 
.................... ////   d = read_full_temp(); Read the temp in degrees F (-67 to 257)    //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... #ifndef DAL_SCL 
.................... #define DAL_SCL PIN_B0 
.................... #define DAL_SDA PIN_B1 
.................... #endif 
....................  
.................... #define read_temp    read_high_temp // for backwards compatability 
....................  
.................... #use i2c(master,sda=DAL_SDA, scl=DAL_SCL) 
....................  
....................  
.................... void temp_config(BYTE data) { 
....................  
....................    i2c_start(); 
....................    i2c_write(0x90); 
....................    i2c_write(0xac); 
....................    i2c_write(data); 
....................    i2c_stop(); 
.................... } 
....................  
....................  
.................... void init_temp() { 
....................    output_high(DAL_SDA); 
....................    output_high(DAL_SCL); 
....................    i2c_start(); 
....................    i2c_write(0x90); 
....................    i2c_write(0xee); 
....................    i2c_stop(); 
....................    temp_config(8); 
.................... } 
....................  
....................  
.................... BYTE read_high_temp() {        // Returns degrees F (0-255) 
....................    BYTE datah,datal; 
....................    signed long data; 
....................  
....................    i2c_start(); 
....................    i2c_write(0x90); 
....................    i2c_write(0xaa); 
....................    i2c_start(); 
....................    i2c_write(0x91); 
....................    datah=i2c_read(); 
....................    datal=i2c_read(0); 
....................    i2c_stop(); 
....................  
....................    data=datah; 
....................    data=data*9; 
....................    if(bit_test(datal,7)) 
....................    { 
....................       if(data < 0) 
....................           data -= 4; 
....................       else 
....................          data += 4; 
....................    } 
....................    data=(data/5)+32; 
....................  
....................    if(data < 0) 
....................       data = 0; 
....................    else if(data > 255) 
....................       data = 255; 
....................  
....................    return((int)data); 
.................... } 
....................  
....................  
.................... signed int read_low_temp() {  // Returns degrees F (-67 to 127) 
....................    signed int datah, datal; 
....................    signed long data; 
....................  
....................    i2c_start(); 
....................    i2c_write(0x90); 
....................    i2c_write(0xaa); 
....................    i2c_start(); 
....................    i2c_write(0x91); 
....................    datah=i2c_read(); 
....................    datal=i2c_read(0); 
....................    i2c_stop(); 
....................  
....................    data=datah; 
....................    data=data*9; 
....................    if(bit_test(datal,7)) 
....................    { 
....................       if(data < 0) 
....................           data -= 4; 
....................       else 
....................          data += 4; 
....................    } 
....................    data = (data / 5) + 32; 
....................  
....................    if(data > 127) 
....................       data = 127; 
....................  
....................    return((int)data); 
.................... } 
....................  
....................  
.................... signed long read_full_temp() {  // Returns degrees F (-67 to 257) 
....................    signed int datah, datal; 
....................    signed long data; 
....................  
....................    i2c_start(); 
....................    i2c_write(0x90); 
....................    i2c_write(0xaa); 
....................    i2c_start(); 
....................    i2c_write(0x91); 
....................    datah=i2c_read(); 
....................    datal=i2c_read(0); 
....................    i2c_stop(); 
....................  
....................    data=datah; 
....................    data=data*9; 
....................    if(bit_test(datal,7)) 
....................    { 
....................       if(data < 0) 
....................           data -= 4; 
....................       else 
....................          data += 4; 
....................    } 
....................    data = (data / 5) + 32; 
....................  
....................    return(data); 
.................... } 
....................  
....................  
.................... int x=0; 
....................  
....................  
.................... void main() 
.................... { 
00C2:  CLRF   04
00C3:  BCF    03.7
00C4:  MOVLW  1F
00C5:  ANDWF  03,F
00C6:  MOVLW  19
00C7:  BSF    03.5
00C8:  MOVWF  19
00C9:  MOVLW  A6
00CA:  MOVWF  18
00CB:  MOVLW  90
00CC:  BCF    03.5
00CD:  MOVWF  18
00CE:  CLRF   20
00CF:  BSF    03.5
00D0:  BSF    1F.0
00D1:  BSF    1F.1
00D2:  BSF    1F.2
00D3:  BCF    1F.3
....................    setup_adc(ADC_CLOCK_INTERNAL); 
00D4:  BCF    03.5
00D5:  BSF    1F.6
00D6:  BSF    1F.7
00D7:  BSF    03.5
00D8:  BCF    1F.7
00D9:  BCF    03.5
00DA:  BSF    1F.0
....................    setup_adc_ports(ALL_ANALOG); 
00DB:  BSF    03.5
00DC:  BCF    1F.0
00DD:  BCF    1F.1
00DE:  BCF    1F.2
00DF:  BCF    1F.3
....................    set_adc_channel(0); 
00E0:  MOVLW  00
00E1:  MOVWF  78
00E2:  BCF    03.5
00E3:  MOVF   1F,W
00E4:  ANDLW  C7
00E5:  IORWF  78,W
00E6:  MOVWF  1F
....................     int in; 
....................    while (true) 
....................    { 
....................       //Udlæsning fra analog potmeter 
....................       int A=READ_ADC(); 
00E7:  BSF    1F.2
00E8:  BTFSC  1F.2
00E9:  GOTO   0E8
00EA:  BSF    03.5
00EB:  MOVF   1E,W
00EC:  BCF    03.5
00ED:  MOVWF  22
....................        
....................       //udlæsning til rs232 
....................       for (x=0;x<10;x++) 
00EE:  CLRF   20
00EF:  MOVF   20,W
00F0:  SUBLW  09
00F1:  BTFSS  03.0
00F2:  GOTO   11C
....................       { 
....................          printf("%u  -  %u \n\r",A,in); 
00F3:  MOVF   22,W
00F4:  MOVWF  23
00F5:  MOVLW  1B
00F6:  MOVWF  24
00F7:  CALL   020
00F8:  MOVLW  05
00F9:  BSF    03.6
00FA:  MOVWF  0D
00FB:  MOVLW  00
00FC:  MOVWF  0F
00FD:  BCF    03.0
00FE:  MOVLW  05
00FF:  BCF    03.6
0100:  MOVWF  23
0101:  GOTO   058
0102:  MOVF   21,W
0103:  MOVWF  23
0104:  MOVLW  1B
0105:  MOVWF  24
0106:  CALL   020
0107:  MOVLW  20
0108:  BTFSS  0C.4
0109:  GOTO   108
010A:  MOVWF  19
010B:  MOVLW  0A
010C:  BTFSS  0C.4
010D:  GOTO   10C
010E:  MOVWF  19
010F:  MOVLW  0D
0110:  BTFSS  0C.4
0111:  GOTO   110
0112:  MOVWF  19
....................          delay_ms(300);  
0113:  MOVLW  02
0114:  MOVWF  23
0115:  MOVLW  96
0116:  MOVWF  24
0117:  GOTO   0AB
0118:  DECFSZ 23,F
0119:  GOTO   115
....................       }      
011A:  INCF   20,F
011B:  GOTO   0EF
....................       //modtag input fra rs232      
....................       
....................       for (x=0;x<10;x++) 
011C:  CLRF   20
011D:  MOVF   20,W
011E:  SUBLW  09
011F:  BTFSS  03.0
0120:  GOTO   136
....................       { 
....................          if(kbhit()) { in = getch();} 
0121:  BTFSS  0C.5
0122:  GOTO   127
0123:  BTFSS  0C.5
0124:  GOTO   123
0125:  MOVF   1A,W
0126:  MOVWF  21
....................        
....................          if (in<50) 
0127:  MOVF   21,W
0128:  SUBLW  31
0129:  BTFSS  03.0
012A:  GOTO   130
....................          { 
....................             output_high(PIN_B0); 
012B:  BSF    03.5
012C:  BCF    06.0
012D:  BCF    03.5
012E:  BSF    06.0
....................          } 
....................          else 
012F:  GOTO   134
....................          { 
....................             output_low(PIN_B0); 
0130:  BSF    03.5
0131:  BCF    06.0
0132:  BCF    03.5
0133:  BCF    06.0
....................          } 
....................       } 
0134:  INCF   20,F
0135:  GOTO   11D
....................        
....................    } 
0136:  GOTO   0E7
....................  
....................  
.................... } 
....................  
0137:  GOTO   137

Configuration Fuses:
   Word  1: 353A   HS NOWDT NOPUT NOBROWNOUT NOLVP NOCPD NOWRT DEBUG NOPROTECT

   Some fuses have been forced to be compatible with the ICD debugger.
